// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_run_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::run();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    match result0 {
        Ok(_) => {
            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
        }
        Err(e) => {
            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
            let vec2 = (e.into_bytes()).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *ptr1.add(8).cast::<usize>() = len2;
            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
        }
    };
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => (),
        _ => {
            let l1 = *arg0.add(4).cast::<*mut u8>();
            let l2 = *arg0.add(8).cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
        }
    }
}
pub trait Guest {
    fn run() -> Result<(), _rt::String>;
}
#[doc(hidden)]

macro_rules! __export_world_root_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "run"]
    unsafe extern "C" fn export_run() -> *mut u8 {
      $($path_to_types)*::_export_run_cabi::<$ty>()
    }
    #[export_name = "cabi_post_run"]
    unsafe extern "C" fn _post_return_run(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_run::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_root_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
#[allow(dead_code)]
pub mod component {
    #[allow(dead_code)]
    pub mod usb {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum DeviceHandleError {
                Io,
                InvalidParam,
                Access,
                NoDevice,
                NotFound,
                Busy,
                Timeout,
                Overflow,
                Pipe,
                Interrupted,
                NoMem,
                NotSupported,
                BadDescriptor,
                Other,
            }
            impl DeviceHandleError {
                pub fn name(&self) -> &'static str {
                    match self {
                        DeviceHandleError::Io => "io",
                        DeviceHandleError::InvalidParam => "invalid-param",
                        DeviceHandleError::Access => "access",
                        DeviceHandleError::NoDevice => "no-device",
                        DeviceHandleError::NotFound => "not-found",
                        DeviceHandleError::Busy => "busy",
                        DeviceHandleError::Timeout => "timeout",
                        DeviceHandleError::Overflow => "overflow",
                        DeviceHandleError::Pipe => "pipe",
                        DeviceHandleError::Interrupted => "interrupted",
                        DeviceHandleError::NoMem => "no-mem",
                        DeviceHandleError::NotSupported => "not-supported",
                        DeviceHandleError::BadDescriptor => "bad-descriptor",
                        DeviceHandleError::Other => "other",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        DeviceHandleError::Io => "",
                        DeviceHandleError::InvalidParam => "",
                        DeviceHandleError::Access => "",
                        DeviceHandleError::NoDevice => "",
                        DeviceHandleError::NotFound => "",
                        DeviceHandleError::Busy => "",
                        DeviceHandleError::Timeout => "",
                        DeviceHandleError::Overflow => "",
                        DeviceHandleError::Pipe => "",
                        DeviceHandleError::Interrupted => "",
                        DeviceHandleError::NoMem => "",
                        DeviceHandleError::NotSupported => "",
                        DeviceHandleError::BadDescriptor => "",
                        DeviceHandleError::Other => "",
                    }
                }
            }
            impl ::core::fmt::Debug for DeviceHandleError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DeviceHandleError")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for DeviceHandleError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for DeviceHandleError {}

            impl DeviceHandleError {
                pub(crate) unsafe fn _lift(val: u8) -> DeviceHandleError {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => DeviceHandleError::Io,
                        1 => DeviceHandleError::InvalidParam,
                        2 => DeviceHandleError::Access,
                        3 => DeviceHandleError::NoDevice,
                        4 => DeviceHandleError::NotFound,
                        5 => DeviceHandleError::Busy,
                        6 => DeviceHandleError::Timeout,
                        7 => DeviceHandleError::Overflow,
                        8 => DeviceHandleError::Pipe,
                        9 => DeviceHandleError::Interrupted,
                        10 => DeviceHandleError::NoMem,
                        11 => DeviceHandleError::NotSupported,
                        12 => DeviceHandleError::BadDescriptor,
                        13 => DeviceHandleError::Other,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Direction {
                In,
                Out,
            }
            impl ::core::fmt::Debug for Direction {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Direction::In => f.debug_tuple("Direction::In").finish(),
                        Direction::Out => f.debug_tuple("Direction::Out").finish(),
                    }
                }
            }

            impl Direction {
                pub(crate) unsafe fn _lift(val: u8) -> Direction {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Direction::In,
                        1 => Direction::Out,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum UsageType {
                Data,
                Feedback,
                FeedbackData,
                Reserved,
            }
            impl ::core::fmt::Debug for UsageType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        UsageType::Data => f.debug_tuple("UsageType::Data").finish(),
                        UsageType::Feedback => f.debug_tuple("UsageType::Feedback").finish(),
                        UsageType::FeedbackData => {
                            f.debug_tuple("UsageType::FeedbackData").finish()
                        }
                        UsageType::Reserved => f.debug_tuple("UsageType::Reserved").finish(),
                    }
                }
            }

            impl UsageType {
                pub(crate) unsafe fn _lift(val: u8) -> UsageType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => UsageType::Data,
                        1 => UsageType::Feedback,
                        2 => UsageType::FeedbackData,
                        3 => UsageType::Reserved,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum SyncType {
                NoSync,
                Asynchronous,
                Adaptive,
                Synchronous,
            }
            impl ::core::fmt::Debug for SyncType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        SyncType::NoSync => f.debug_tuple("SyncType::NoSync").finish(),
                        SyncType::Asynchronous => f.debug_tuple("SyncType::Asynchronous").finish(),
                        SyncType::Adaptive => f.debug_tuple("SyncType::Adaptive").finish(),
                        SyncType::Synchronous => f.debug_tuple("SyncType::Synchronous").finish(),
                    }
                }
            }

            impl SyncType {
                pub(crate) unsafe fn _lift(val: u8) -> SyncType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => SyncType::NoSync,
                        1 => SyncType::Asynchronous,
                        2 => SyncType::Adaptive,
                        3 => SyncType::Synchronous,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum TransferType {
                Control,
                Isochronous,
                Bulk,
                Interrupt,
            }
            impl ::core::fmt::Debug for TransferType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        TransferType::Control => f.debug_tuple("TransferType::Control").finish(),
                        TransferType::Isochronous => {
                            f.debug_tuple("TransferType::Isochronous").finish()
                        }
                        TransferType::Bulk => f.debug_tuple("TransferType::Bulk").finish(),
                        TransferType::Interrupt => {
                            f.debug_tuple("TransferType::Interrupt").finish()
                        }
                    }
                }
            }

            impl TransferType {
                pub(crate) unsafe fn _lift(val: u8) -> TransferType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => TransferType::Control,
                        1 => TransferType::Isochronous,
                        2 => TransferType::Bulk,
                        3 => TransferType::Interrupt,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Version {
                pub major: u8,
                pub minor: u8,
                pub subminor: u8,
            }
            impl ::core::fmt::Debug for Version {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Version")
                        .field("major", &self.major)
                        .field("minor", &self.minor)
                        .field("subminor", &self.subminor)
                        .finish()
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod descriptors {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Direction = super::super::super::component::usb::types::Direction;
            pub type SyncType = super::super::super::component::usb::types::SyncType;
            pub type TransferType = super::super::super::component::usb::types::TransferType;
            pub type UsageType = super::super::super::component::usb::types::UsageType;
            pub type Version = super::super::super::component::usb::types::Version;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndpointDescriptor {
                pub address: u8,
                pub direction: Direction,
                pub interval: u8,
                pub max_packet_size: u16,
                pub number: u8,
                pub refresh: u8,
                /// Audio
                pub sync_type: SyncType,
                pub synch_address: u8,
                /// Audio
                pub transfer_type: TransferType,
                pub usage_type: UsageType,
            }
            impl ::core::fmt::Debug for EndpointDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EndpointDescriptor")
                        .field("address", &self.address)
                        .field("direction", &self.direction)
                        .field("interval", &self.interval)
                        .field("max-packet-size", &self.max_packet_size)
                        .field("number", &self.number)
                        .field("refresh", &self.refresh)
                        .field("sync-type", &self.sync_type)
                        .field("synch-address", &self.synch_address)
                        .field("transfer-type", &self.transfer_type)
                        .field("usage-type", &self.usage_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct InterfaceDescriptor {
                pub number: u8,
                pub alternate_setting: u8,
                pub class_code: u8,
                pub subclass_code: u8,
                pub protocol: u8,
                pub interface_string_index: Option<u8>,
                pub endpoint_descriptors: _rt::Vec<EndpointDescriptor>,
            }
            impl ::core::fmt::Debug for InterfaceDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("InterfaceDescriptor")
                        .field("number", &self.number)
                        .field("alternate-setting", &self.alternate_setting)
                        .field("class-code", &self.class_code)
                        .field("subclass-code", &self.subclass_code)
                        .field("protocol", &self.protocol)
                        .field("interface-string-index", &self.interface_string_index)
                        .field("endpoint-descriptors", &self.endpoint_descriptors)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ConfigurationDescriptor {
                pub name: Option<_rt::String>,
                pub max_power: u16,
                pub number: u8,
                pub interfaces: _rt::Vec<InterfaceDescriptor>,
            }
            impl ::core::fmt::Debug for ConfigurationDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ConfigurationDescriptor")
                        .field("name", &self.name)
                        .field("max-power", &self.max_power)
                        .field("number", &self.number)
                        .field("interfaces", &self.interfaces)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct DeviceDescriptor {
                pub device_class: u8,
                pub device_protocol: u8,
                pub device_subclass: u8,
                pub device_version: Version,
                pub product_id: u16,
                pub usb_version: Version,
                pub vendor_id: u16,
                pub max_packet_size: u8,
                pub manufacturer_string_index: Option<u8>,
                pub product_string_index: Option<u8>,
                pub serial_number_string_index: Option<u8>,
                pub num_configurations: u8,
            }
            impl ::core::fmt::Debug for DeviceDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DeviceDescriptor")
                        .field("device-class", &self.device_class)
                        .field("device-protocol", &self.device_protocol)
                        .field("device-subclass", &self.device_subclass)
                        .field("device-version", &self.device_version)
                        .field("product-id", &self.product_id)
                        .field("usb-version", &self.usb_version)
                        .field("vendor-id", &self.vendor_id)
                        .field("max-packet-size", &self.max_packet_size)
                        .field("manufacturer-string-index", &self.manufacturer_string_index)
                        .field("product-string-index", &self.product_string_index)
                        .field(
                            "serial-number-string-index",
                            &self.serial_number_string_index,
                        )
                        .field("num-configurations", &self.num_configurations)
                        .finish()
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod usb {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type DeviceHandleError =
                super::super::super::component::usb::types::DeviceHandleError;
            pub type ConfigurationDescriptor =
                super::super::super::component::usb::descriptors::ConfigurationDescriptor;
            pub type DeviceDescriptor =
                super::super::super::component::usb::descriptors::DeviceDescriptor;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbDevice {
                handle: _rt::Resource<UsbDevice>,
            }

            impl UsbDevice {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for UsbDevice {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-device"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DeviceHandle {
                handle: _rt::Resource<DeviceHandle>,
            }

            impl DeviceHandle {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DeviceHandle {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]device-handle"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Get a list of all configurations of the USB device.
                pub fn configurations(
                    &self,
                ) -> Result<_rt::Vec<ConfigurationDescriptor>, DeviceHandleError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]usb-device.configurations"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base33 = l2;
                                    let len33 = l3;
                                    let mut result33 = _rt::Vec::with_capacity(len33);
                                    for i in 0..len33 {
                                        let base = base33.add(i * 24);
                                        let e33 = {
                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                            let l8 = i32::from(*base.add(12).cast::<u16>());
                                            let l9 = i32::from(*base.add(14).cast::<u8>());
                                            let l10 = *base.add(16).cast::<*mut u8>();
                                            let l11 = *base.add(20).cast::<usize>();
                                            let base32 = l10;
                                            let len32 = l11;
                                            let mut result32 = _rt::Vec::with_capacity(len32);
                                            for i in 0..len32 {
                                                let base = base32.add(i * 16);
                                                let e32 = {
                                                    let l12 = i32::from(*base.add(0).cast::<u8>());
                                                    let l13 = i32::from(*base.add(1).cast::<u8>());
                                                    let l14 = i32::from(*base.add(2).cast::<u8>());
                                                    let l15 = i32::from(*base.add(3).cast::<u8>());
                                                    let l16 = i32::from(*base.add(4).cast::<u8>());
                                                    let l17 = i32::from(*base.add(5).cast::<u8>());
                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                    let l20 = *base.add(12).cast::<usize>();
                                                    let base31 = l19;
                                                    let len31 = l20;
                                                    let mut result31 =
                                                        _rt::Vec::with_capacity(len31);
                                                    for i in 0..len31 {
                                                        let base = base31.add(i * 12);
                                                        let e31 = {
                                                            let l21 = i32::from(
                                                                *base.add(0).cast::<u8>(),
                                                            );
                                                            let l22 = i32::from(
                                                                *base.add(1).cast::<u8>(),
                                                            );
                                                            let l23 = i32::from(
                                                                *base.add(2).cast::<u8>(),
                                                            );
                                                            let l24 = i32::from(
                                                                *base.add(4).cast::<u16>(),
                                                            );
                                                            let l25 = i32::from(
                                                                *base.add(6).cast::<u8>(),
                                                            );
                                                            let l26 = i32::from(
                                                                *base.add(7).cast::<u8>(),
                                                            );
                                                            let l27 = i32::from(
                                                                *base.add(8).cast::<u8>(),
                                                            );
                                                            let l28 = i32::from(
                                                                *base.add(9).cast::<u8>(),
                                                            );
                                                            let l29 = i32::from(
                                                                *base.add(10).cast::<u8>(),
                                                            );
                                                            let l30 = i32::from(
                                                                *base.add(11).cast::<u8>(),
                                                            );

                                                            super::super::super::component::usb::descriptors::EndpointDescriptor{
                                address: l21 as u8,
                                direction: super::super::super::component::usb::types::Direction::_lift(l22 as u8),
                                interval: l23 as u8,
                                max_packet_size: l24 as u16,
                                number: l25 as u8,
                                refresh: l26 as u8,
                                sync_type: super::super::super::component::usb::types::SyncType::_lift(l27 as u8),
                                synch_address: l28 as u8,
                                transfer_type: super::super::super::component::usb::types::TransferType::_lift(l29 as u8),
                                usage_type: super::super::super::component::usb::types::UsageType::_lift(l30 as u8),
                              }
                                                        };
                                                        result31.push(e31);
                                                    }
                                                    _rt::cabi_dealloc(base31, len31 * 12, 2);

                                                    super::super::super::component::usb::descriptors::InterfaceDescriptor{
                            number: l12 as u8,
                            alternate_setting: l13 as u8,
                            class_code: l14 as u8,
                            subclass_code: l15 as u8,
                            protocol: l16 as u8,
                            interface_string_index: match l17 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l18 = i32::from(*base.add(6).cast::<u8>());

                                  l18 as u8
                                };
                                Some(e)
                              }
                              _ => _rt::invalid_enum_discriminant(),
                            },
                            endpoint_descriptors: result31,
                          }
                                                };
                                                result32.push(e32);
                                            }
                                            _rt::cabi_dealloc(base32, len32 * 16, 4);

                                            super::super::super::component::usb::descriptors::ConfigurationDescriptor{
                        name: match l4 {
                          0 => None,
                          1 => {
                            let e = {
                              let l5 = *base.add(4).cast::<*mut u8>();
                              let l6 = *base.add(8).cast::<usize>();
                              let len7 = l6;
                              let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                              _rt::string_lift(bytes7)
                            };
                            Some(e)
                          }
                          _ => _rt::invalid_enum_discriminant(),
                        },
                        max_power: l8 as u16,
                        number: l9 as u8,
                        interfaces: result32,
                      }
                                        };
                                        result33.push(e33);
                                    }
                                    _rt::cabi_dealloc(base33, len33 * 24, 4);

                                    result33
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l34 = i32::from(*ptr0.add(4).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l34 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                pub fn device_descriptor(&self) -> DeviceDescriptor {
                    unsafe {
                        #[repr(align(2))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 22]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 22]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]usb-device.device-descriptor"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let l2 = i32::from(*ptr0.add(1).cast::<u8>());
                        let l3 = i32::from(*ptr0.add(2).cast::<u8>());
                        let l4 = i32::from(*ptr0.add(3).cast::<u8>());
                        let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(5).cast::<u8>());
                        let l7 = i32::from(*ptr0.add(6).cast::<u16>());
                        let l8 = i32::from(*ptr0.add(8).cast::<u8>());
                        let l9 = i32::from(*ptr0.add(9).cast::<u8>());
                        let l10 = i32::from(*ptr0.add(10).cast::<u8>());
                        let l11 = i32::from(*ptr0.add(12).cast::<u16>());
                        let l12 = i32::from(*ptr0.add(14).cast::<u8>());
                        let l13 = i32::from(*ptr0.add(15).cast::<u8>());
                        let l15 = i32::from(*ptr0.add(17).cast::<u8>());
                        let l17 = i32::from(*ptr0.add(19).cast::<u8>());
                        let l19 = i32::from(*ptr0.add(21).cast::<u8>());
                        super::super::super::component::usb::descriptors::DeviceDescriptor {
                            device_class: l1 as u8,
                            device_protocol: l2 as u8,
                            device_subclass: l3 as u8,
                            device_version: super::super::super::component::usb::types::Version {
                                major: l4 as u8,
                                minor: l5 as u8,
                                subminor: l6 as u8,
                            },
                            product_id: l7 as u16,
                            usb_version: super::super::super::component::usb::types::Version {
                                major: l8 as u8,
                                minor: l9 as u8,
                                subminor: l10 as u8,
                            },
                            vendor_id: l11 as u16,
                            max_packet_size: l12 as u8,
                            manufacturer_string_index: match l13 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l14 = i32::from(*ptr0.add(16).cast::<u8>());

                                        l14 as u8
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            product_string_index: match l15 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l16 = i32::from(*ptr0.add(18).cast::<u8>());

                                        l16 as u8
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            serial_number_string_index: match l17 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l18 = i32::from(*ptr0.add(20).cast::<u8>());

                                        l18 as u8
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            num_configurations: l19 as u8,
                        }
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Open the device. If successfull, this will return a device handle which can be used to interact with the device.
                pub fn open(&self) -> Result<DeviceHandle, DeviceHandleError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]usb-device.open"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    DeviceHandle::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Get a list of all USB devices the guest is allowed to access.
                pub fn enumerate() -> _rt::Vec<UsbDevice> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[static]usb-device.enumerate"]
                            fn wit_import(_: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                UsbDevice::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn reset(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.reset"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn active_configuration(&self) -> Result<u8, DeviceHandleError> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.active-configuration"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    l2 as u8
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(1).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn select_configuration(&self, configuration: u8) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.select-configuration"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(&configuration));
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                /// **Interfaces**
                /// Claim an interface.
                /// Claiming an interface can fail. For example, the operating system might not allow claiming the interface.
                pub fn claim_interface(&self, interface: u8) -> Result<(), DeviceHandleError> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.claim-interface"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(&interface), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l2 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                /// Release an interface.
                pub fn release_interface(&self, interface: u8) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.release-interface"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(&interface));
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                /// Select an alternate interface.
                pub fn select_alternate_interface(
                    &self,
                    interface: u8,
                    setting: u8,
                ) -> Result<(), DeviceHandleError> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.select-alternate-interface"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&interface),
                            _rt::as_i32(&setting),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(1).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l2 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                /// **Reading & Writing**
                pub fn read_interrupt(
                    &self,
                    endpoint: u8,
                ) -> Result<(u64, _rt::Vec<u8>), DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.read-interrupt"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(&endpoint), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                                    let l4 = *ptr0.add(20).cast::<usize>();
                                    let len5 = l4;

                                    (l2 as u64, _rt::Vec::from_raw_parts(l3.cast(), len5, len5))
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr0.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_interrupt(
                    &self,
                    endpoint: u8,
                    data: &[u8],
                ) -> Result<u64, DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.write-interrupt"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&endpoint),
                            ptr0.cast_mut(),
                            len0,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(8).cast::<i64>();

                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read_bulk(
                    &self,
                    endpoint: u8,
                    max_size: u16,
                ) -> Result<(u64, _rt::Vec<u8>), DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.read-bulk"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&endpoint),
                            _rt::as_i32(&max_size),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                                    let l4 = *ptr0.add(20).cast::<usize>();
                                    let len5 = l4;

                                    (l2 as u64, _rt::Vec::from_raw_parts(l3.cast(), len5, len5))
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr0.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_bulk(
                    &self,
                    endpoint: u8,
                    data: &[u8],
                ) -> Result<u64, DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.write-bulk"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&endpoint),
                            ptr0.cast_mut(),
                            len0,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(8).cast::<i64>();

                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read_isochronous(
                    &self,
                    endpoint: u8,
                ) -> Result<(u64, _rt::Vec<u8>), DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.read-isochronous"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(&endpoint), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                                    let l4 = *ptr0.add(20).cast::<usize>();
                                    let len5 = l4;

                                    (l2 as u64, _rt::Vec::from_raw_parts(l3.cast(), len5, len5))
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr0.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_isochronous(
                    &self,
                    endpoint: u8,
                    data: &[u8],
                ) -> Result<u64, DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.write-isochronous"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&endpoint),
                            ptr0.cast_mut(),
                            len0,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(8).cast::<i64>();

                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read_control(
                    &self,
                    request_type: u8,
                    request: u8,
                    value: u16,
                    index: u16,
                    max_size: u16,
                ) -> Result<(u64, _rt::Vec<u8>), DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.read-control"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&request_type),
                            _rt::as_i32(&request),
                            _rt::as_i32(&value),
                            _rt::as_i32(&index),
                            _rt::as_i32(&max_size),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                                    let l4 = *ptr0.add(20).cast::<usize>();
                                    let len5 = l4;

                                    (l2 as u64, _rt::Vec::from_raw_parts(l3.cast(), len5, len5))
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr0.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l6 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DeviceHandle {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_control(
                    &self,
                    request_type: u8,
                    request: u8,
                    value: u16,
                    index: u16,
                    buf: &[u8],
                ) -> Result<u64, DeviceHandleError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = buf;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:usb/usb@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]device-handle.write-control"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&request_type),
                            _rt::as_i32(&request),
                            _rt::as_i32(&value),
                            _rt::as_i32(&index),
                            ptr0.cast_mut(),
                            len0,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(8).cast::<i64>();

                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(8).cast::<u8>());

                                    super::super::super::component::usb::types::DeviceHandleError::_lift(l4 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod events {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            pub type UsbDevice = super::super::super::component::usb::usb::UsbDevice;
            pub enum DeviceConnectionEvent {
                Pending,
                Connected(UsbDevice),
                Disconnected(UsbDevice),
            }
            impl ::core::fmt::Debug for DeviceConnectionEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DeviceConnectionEvent::Pending => {
                            f.debug_tuple("DeviceConnectionEvent::Pending").finish()
                        }
                        DeviceConnectionEvent::Connected(e) => f
                            .debug_tuple("DeviceConnectionEvent::Connected")
                            .field(e)
                            .finish(),
                        DeviceConnectionEvent::Disconnected(e) => f
                            .debug_tuple("DeviceConnectionEvent::Disconnected")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update() -> DeviceConnectionEvent {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:usb/events@0.2.0")]
                    extern "C" {
                        #[link_name = "update"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    let v4 = match l1 {
                        0 => DeviceConnectionEvent::Pending,
                        1 => {
                            let e4 = {
                                let l2 = *ptr0.add(4).cast::<i32>();

                                super::super::super::component::usb::usb::UsbDevice::from_handle(
                                    l2 as u32,
                                )
                            };
                            DeviceConnectionEvent::Connected(e4)
                        }
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            let e4 = {
                                let l3 = *ptr0.add(4).cast::<i32>();

                                super::super::super::component::usb::usb::UsbDevice::from_handle(
                                    l3 as u32,
                                )
                            };
                            DeviceConnectionEvent::Disconnected(e4)
                        }
                    };
                    v4
                }
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_root_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_root_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_root_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:root:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2968] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9d\x16\x01A\x02\x01\
A\x14\x01B\x0c\x01m\x0e\x02io\x0dinvalid-param\x06access\x09no-device\x09not-fou\
nd\x04busy\x07timeout\x08overflow\x04pipe\x0binterrupted\x06no-mem\x0dnot-suppor\
ted\x0ebad-descriptor\x05other\x04\0\x13device-handle-error\x03\0\0\x01m\x02\x02\
in\x03out\x04\0\x09direction\x03\0\x02\x01m\x04\x04data\x08feedback\x0dfeedback-\
data\x08reserved\x04\0\x0ausage-type\x03\0\x04\x01m\x04\x07no-sync\x0casynchrono\
us\x08adaptive\x0bsynchronous\x04\0\x09sync-type\x03\0\x06\x01m\x04\x07control\x0b\
isochronous\x04bulk\x09interrupt\x04\0\x0dtransfer-type\x03\0\x08\x01r\x03\x05ma\
jor}\x05minor}\x08subminor}\x04\0\x07version\x03\0\x0a\x03\x01\x19component:usb/\
types@0.2.0\x05\0\x02\x03\0\0\x09direction\x02\x03\0\0\x09sync-type\x02\x03\0\0\x0d\
transfer-type\x02\x03\0\0\x0ausage-type\x02\x03\0\0\x07version\x01B\x16\x02\x03\x02\
\x01\x01\x04\0\x09direction\x03\0\0\x02\x03\x02\x01\x02\x04\0\x09sync-type\x03\0\
\x02\x02\x03\x02\x01\x03\x04\0\x0dtransfer-type\x03\0\x04\x02\x03\x02\x01\x04\x04\
\0\x0ausage-type\x03\0\x06\x02\x03\x02\x01\x05\x04\0\x07version\x03\0\x08\x01r\x0a\
\x07address}\x09direction\x01\x08interval}\x0fmax-packet-size{\x06number}\x07ref\
resh}\x09sync-type\x03\x0dsynch-address}\x0dtransfer-type\x05\x0ausage-type\x07\x04\
\0\x13endpoint-descriptor\x03\0\x0a\x01k}\x01p\x0b\x01r\x07\x06number}\x11altern\
ate-setting}\x0aclass-code}\x0dsubclass-code}\x08protocol}\x16interface-string-i\
ndex\x0c\x14endpoint-descriptors\x0d\x04\0\x14interface-descriptor\x03\0\x0e\x01\
ks\x01p\x0f\x01r\x04\x04name\x10\x09max-power{\x06number}\x0ainterfaces\x11\x04\0\
\x18configuration-descriptor\x03\0\x12\x01r\x0c\x0cdevice-class}\x0fdevice-proto\
col}\x0fdevice-subclass}\x0edevice-version\x09\x0aproduct-id{\x0busb-version\x09\
\x09vendor-id{\x0fmax-packet-size}\x19manufacturer-string-index\x0c\x14product-s\
tring-index\x0c\x1aserial-number-string-index\x0c\x12num-configurations}\x04\0\x11\
device-descriptor\x03\0\x14\x03\x01\x1fcomponent:usb/descriptors@0.2.0\x05\x06\x02\
\x03\0\0\x13device-handle-error\x02\x03\0\x01\x18configuration-descriptor\x02\x03\
\0\x01\x11device-descriptor\x01B7\x02\x03\x02\x01\x07\x04\0\x13device-handle-err\
or\x03\0\0\x02\x03\x02\x01\x08\x04\0\x18configuration-descriptor\x03\0\x02\x02\x03\
\x02\x01\x09\x04\0\x11device-descriptor\x03\0\x04\x04\0\x0ausb-device\x03\x01\x04\
\0\x0ddevice-handle\x03\x01\x01h\x06\x01p\x03\x01j\x01\x09\x01\x01\x01@\x01\x04s\
elf\x08\0\x0a\x04\0![method]usb-device.configurations\x01\x0b\x01@\x01\x04self\x08\
\0\x05\x04\0$[method]usb-device.device-descriptor\x01\x0c\x01i\x07\x01j\x01\x0d\x01\
\x01\x01@\x01\x04self\x08\0\x0e\x04\0\x17[method]usb-device.open\x01\x0f\x01i\x06\
\x01p\x10\x01@\0\0\x11\x04\0\x1c[static]usb-device.enumerate\x01\x12\x01h\x07\x01\
@\x01\x04self\x13\x01\0\x04\0\x1b[method]device-handle.reset\x01\x14\x01j\x01}\x01\
\x01\x01@\x01\x04self\x13\0\x15\x04\0*[method]device-handle.active-configuration\
\x01\x16\x01@\x02\x04self\x13\x0dconfiguration}\x01\0\x04\0*[method]device-handl\
e.select-configuration\x01\x17\x01j\0\x01\x01\x01@\x02\x04self\x13\x09interface}\
\0\x18\x04\0%[method]device-handle.claim-interface\x01\x19\x01@\x02\x04self\x13\x09\
interface}\x01\0\x04\0'[method]device-handle.release-interface\x01\x1a\x01@\x03\x04\
self\x13\x09interface}\x07setting}\0\x18\x04\00[method]device-handle.select-alte\
rnate-interface\x01\x1b\x01p}\x01o\x02w\x1c\x01j\x01\x1d\x01\x01\x01@\x02\x04sel\
f\x13\x08endpoint}\0\x1e\x04\0$[method]device-handle.read-interrupt\x01\x1f\x01j\
\x01w\x01\x01\x01@\x03\x04self\x13\x08endpoint}\x04data\x1c\0\x20\x04\0%[method]\
device-handle.write-interrupt\x01!\x01@\x03\x04self\x13\x08endpoint}\x08max-size\
{\0\x1e\x04\0\x1f[method]device-handle.read-bulk\x01\"\x04\0\x20[method]device-h\
andle.write-bulk\x01!\x04\0&[method]device-handle.read-isochronous\x01\x1f\x04\0\
'[method]device-handle.write-isochronous\x01!\x01@\x06\x04self\x13\x0crequest-ty\
pe}\x07request}\x05value{\x05index{\x08max-size{\0\x1e\x04\0\"[method]device-han\
dle.read-control\x01#\x01@\x06\x04self\x13\x0crequest-type}\x07request}\x05value\
{\x05index{\x03buf\x1c\0\x20\x04\0#[method]device-handle.write-control\x01$\x03\x01\
\x17component:usb/usb@0.2.0\x05\x0a\x02\x03\0\x02\x0ausb-device\x01B\x07\x02\x03\
\x02\x01\x0b\x04\0\x0ausb-device\x03\0\0\x01i\x01\x01q\x03\x07pending\0\0\x09con\
nected\x01\x02\0\x0cdisconnected\x01\x02\0\x04\0\x17device-connection-event\x03\0\
\x03\x01@\0\0\x04\x04\0\x06update\x01\x05\x03\x01\x1acomponent:usb/events@0.2.0\x05\
\x0c\x01j\0\x01s\x01@\0\0\x0d\x04\0\x03run\x01\x0e\x04\x01(component:usb-compone\
nt-wasi-stadia/root\x04\0\x0b\x0a\x01\0\x04root\x03\0\0\0G\x09producers\x01\x0cp\
rocessed-by\x02\x0dwit-component\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
