package component:usb@0.1.0;

interface device {
    use types.{properties, configuration, device-handle-error, device-filter};

    resource usb-device {
        configuration: func() -> result<configuration, device-handle-error>;
        configurations: func() -> result<list<configuration>, device-handle-error>;

        properties: func() -> properties;

        product-name: func() -> result<string, device-handle-error>;
        manufacturer-name: func() -> result<string, device-handle-error>;
        serial-number: func() -> result<string, device-handle-error>;

        open: func() -> result<device-handle, device-handle-error>;
    }

    resource device-handle {
        select-configuration: func(configuration: u8);
        select-alternate-interface: func(%interface: u8, setting: u8) -> result<_, device-handle-error>;

        claim-interface: func(%interface: u8);
        release-interface: func(%interface: u8);

        write-interrupt: func(endpoint: u8, data: list<u8>) -> result<u64, device-handle-error>;
        write-bulk: func(endpoint: u8, data: list<u8>) -> result<u64, device-handle-error>;
        write-control: func(request-type: u8, request: u8, value: u16, index: u16, buf: list<u8>) -> result<u64, device-handle-error>;

        read-bulk: func(endpoint: u8, max-size: u16) -> result<tuple<u64, list<u8>>, device-handle-error>;
        read-interrupt: func(endpoint: u8) -> result<tuple<u64, list<u8>>, device-handle-error>;


        detach-kernel-driver: func(%interface: u8) -> result<_, device-handle-error>;
        kernel-driver-active: func(%interface: u8) -> result<bool, device-handle-error>;
    }

    get-devices: func() -> list<usb-device>;

    request-device: func(filter: device-filter) -> option<usb-device>;
}
